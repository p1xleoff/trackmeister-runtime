//account lists
<View style={styles.item}>
<Text style={styles.text}>
    Choose Language
</Text>
</View>
<View style={styles.item}>
<Text style={styles.text}>
    Support
</Text>
</View>
<Divider style={{backgroundColor: 'black', height: 1}}/>
<View style={styles.item}>
<Text style={styles.text}>
    Choose Theme
</Text>
</View>
<View style={styles.item}>
<Text style={styles.text}>
    About
</Text>
</View>

//login
if (!email || !password) {
    Alert.alert('Please enter an email and password');
    return;
  }
  if (!isValidEmail(email)) {
    Alert.alert('Please enter a valid email address');
    return;
  }

  if (!isValidPassword(password)) {
    Alert.alert('Incorrect Password');
    return;
  }

  //
  const isValidEmail = (email) => {
    const emailRegex = /\S+@\S+\.\S+/;
    return emailRegex.test(email);
  };
  
  const isValidPassword = (password) => {
    return password.length >= 6;
  };

  //api url
  `https://maps.googleapis.com/maps/api/place/textsearch/json?key=YOUR_API_KEY&query=${searchQuery} bus stop`


///////////////////////////////////
**********************search bus stops + list***************
import React, { useState, useEffect, useContext } from 'react';
import { View, Text, FlatList, StyleSheet, StatusBar, ActivityIndicator } from 'react-native';
import { getDatabase, ref, onValue, off } from 'firebase/database';
import { Searchbar } from 'react-native-paper';
import themeContext from "../config/themeContext";
import { useNavigation } from '@react-navigation/native';

const db = getDatabase();

export default function Search() {
  const theme = useContext(themeContext);
  const styles = getStyles(theme);
  const [data, setData] = useState(null);
  const [filteredData, setFilteredData] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [isMounted, setIsMounted] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const navigation = useNavigation();

  const toLanding = () => {
    navigation.navigate('Landing');
  };

  useEffect(() => {
    setIsMounted(true);

    const starCountRef = ref(db, 'busStops');
    onValue(starCountRef, (snapshot) => {
      const data = snapshot.val();
      setData(data);
      setFilteredData(data);
      setIsLoading(false);
    });

    return () => {
      setIsMounted(false);
      off(starCountRef);
    };
  }, []);

  useEffect(() => {
    if (isMounted) {
      const filteredResults = data.filter((item) => {
        return (
          item.stopName.toLowerCase().includes(searchText.toLowerCase()) ||
          item.address.toLowerCase().includes(searchText.toLowerCase())
        );
      });
      setFilteredData(filteredResults);
    }
  }, [searchText]);

  const renderItem = ({ item }) => {
    return (
      <View style={{ padding: 10 }}>
        <Text style={styles.title}>{item.stopName}</Text>
        <Text style={styles.text}>{item.address}</Text>
      </View>
    );
  };

  return ( 
    <View style={styles.container}>
      {isLoading ? null : (
        <View style={styles.searchContainer}>
          <Searchbar
            style={styles.searchBar}
            onChangeText={(text) => setSearchText(text)}
            value={searchText}
            placeholder="Search for stops"
            placeholderTextColor={theme.subtext}
            iconColor={theme.subtext}
            icon="arrow-left"
            onIconPress={toLanding}
          />
        </View>
      )}
      {(isLoading ? null :  (
      <View style={styles.headerContainer}>
      <Text style={styles.header}>Bus Stops</Text>
    </View>
      ))}
      {isLoading ? (
        <ActivityIndicator style={styles.loader} size="large" color={theme.accent} />
      ) : (
        <FlatList
          style={styles.list}
          data={Object.values(filteredData)}
          renderItem={renderItem}
          keyExtractor={(item, index) => index.toString()}
        />
      )}
    </View>
  );
}

const getStyles = (theme) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.background,
      paddingTop: 10
    },
    title: {
      fontWeight: 'bold',
      color: theme.color
    },
    searchBar: {
      backgroundColor: theme.barColor,
    },
    searchContainer:  {
      alignItems: 'center',
      marginHorizontal: '5%',
      marginBottom: '5%',
      borderRadius: 30,
      elevation: 10,
    },
    list: {
      marginHorizontal: '5%',
      color: theme.color
    },
    headerContainer: {
      alignItems: 'center',
      justifyContent: 'center',
      marginBottom: 10,
      borderBottomWidth: 1,
      borderColor: theme.color
    },
    header: {
      fontWeight: 'bold',
      fontSize: 16,
      color: theme.accent,
      marginBottom: 10
    },
    loader: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
    text: {
      color: theme.subtext
    },
  });

//////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////
*************old map screen************************
import React, { useEffect, useState, useContext } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import { requestForegroundPermissionsAsync, getLastKnownPositionAsync, watchPositionAsync } from 'expo-location';
import { getDatabase, ref, onValue, off } from 'firebase/database';
import themeContext from "../config/themeContext";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import SearchBar from '../components/SearchBar';

const Map = () => {
  const theme = useContext(themeContext);
  const styles = getStyles(theme);

  const [busStops, setBusStops] = useState([]);
  const [userLocation, setUserLocation] = useState(null);

  useEffect(() => {
    const busStopsRef = ref(getDatabase(), 'busStops');

    const handleData = (snapshot) => {
      const busStopsData = snapshot.val();
      if (busStopsData) {
        const busStopsArray = Object.values(busStopsData);
        setBusStops(busStopsArray);
      }
    };

    onValue(busStopsRef, handleData);

    // Request location permissions
    const requestLocationPermission = async () => {
      const { status } = await requestForegroundPermissionsAsync();
      if (status === 'granted') {
        // Get the user's last known position
        const location = await getLastKnownPositionAsync({});
        if (location) {
          setUserLocation(location.coords);
        }
        // Watch for location updates
        const locationWatchId = watchPositionAsync({}, (location) => {
          setUserLocation(location.coords);
        });
        return () => {
          off(busStopsRef, 'value', handleData);
          // Clear the location watch when the component unmounts
          locationWatchId.remove();
        };
      }
    };

    requestLocationPermission();
  }, []);

  const focusUserLocation = () => {
    if (userLocation) {
      mapRef.current.animateToRegion({
        latitude: userLocation.latitude,
        longitude: userLocation.longitude,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421,
      });
    }
  };
  const mapRef = React.createRef();

  return (
    <View style={styles.container}>
      {userLocation && (
        <MapView
          ref={mapRef}
          style={styles.map}
          initialRegion={{
            latitude: userLocation.latitude,
            longitude: userLocation.longitude,
            latitudeDelta: 0.0922,
            longitudeDelta: 0.0421,
          }}
          showsCompass= {true}
          showsUserLocation={true}
          loadingEnabled={true}
          showsMyLocationButton={false}
        >
          {busStops.map((busStops) => (
            <Marker
              key={busStops.stopId}
              coordinate={{ latitude: busStops.latitude, longitude: busStops.longitude }}
              title={busStops.stopName}
              description={busStops.address}
              pinColor='blue'
            />
          ))}
        </MapView>
      )}
      {!userLocation && <ActivityIndicator style={styles.loader} size="large" color={theme.accent} />}
      <View style={styles.searchBarContainer}>
        <View style={styles.searchBar}>
        <SearchBar />
        </View>
      </View> 
      <View style={styles.buttonContainer}>
      <TouchableOpacity style={styles.button} onPress={focusUserLocation}>
        <View style={styles.buttonContent}>
        <MaterialCommunityIcons style={styles.icon} name='crosshairs-gps'/>
        <Text style={styles.buttonText}>Focus On Your Location</Text>
        </View>
    </TouchableOpacity>      
        </View>
    </View>
  );
};

const getStyles = (theme) =>
  StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    flex: 1,
  },
  searchBarContainer: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
  },
  buttonContainer: {
    position: 'absolute',
    bottom: 10,
    alignSelf: 'center',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  buttonContent:  {
    flexDirection: 'row',
    alignItems: 'center',
  },
  button: {
    backgroundColor: theme.accent,
    padding: 16,
    borderRadius: 29,
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: 'bold'
  },
  icon: {
    fontSize: 22,
    paddingRight: 5,
    color: '#fff',
  },
  loader: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default Map;
//////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
///////////search component initial with route to map, working////////////////////
import React, { useEffect, useState, useContext } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, StatusBar, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { getDatabase, ref, onValue, off } from 'firebase/database';
import { Searchbar } from 'react-native-paper';
import themeContext from "../config/themeContext";

const Search = () => {
  const [busStops, setBusStops] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [loading, setLoading] = useState(true); // Loading state
  const navigation = useNavigation();

  const theme = useContext(themeContext);
  const styles = getStyles(theme);

  useEffect(() => {
    const db = getDatabase();
    const busStopsRef = ref(db, 'busStops');
    onValue(busStopsRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const busStopsArray = Object.keys(data).map((key) => ({
          id: key,
          ...data[key],
        }));
        setBusStops(busStopsArray);
      }
      setLoading(false); // Set loading to false when data is loaded
    });

    return () => {
      off(busStopsRef);
    };
  }, []);

  const handleBusStopSelect = (busStop) => {
    navigation.navigate('Map', { busStop });
  };

  const handleSearchTextChange = (text) => {
    setSearchText(text);
  };

  const toLanding = () => {
    navigation.navigate('Landing');
  };

  const filteredBusStops = busStops.filter(
    (busStop) =>
      busStop.stopName.toLowerCase().includes(searchText.toLowerCase()) ||
      busStop.address.toLowerCase().includes(searchText.toLowerCase())
  );

  const renderBusStopItem = ({ item }) => (
    <TouchableOpacity onPress={() => handleBusStopSelect(item)} style={styles.busStopItem}>
      <Text style={styles.title}>{item.stopName}</Text>
      <Text style={styles.subText}>{item.address}</Text>
    </TouchableOpacity>
  );

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={theme.accent} />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.searchContainer}>
        <Searchbar
          style={styles.searchBar}
          onChangeText={handleSearchTextChange}
          value={searchText}
          placeholder="Search for stops"
          placeholderTextColor={theme.subtext}
          iconColor={theme.subtext}
          icon="arrow-left"
          onIconPress={toLanding}
        />
      </View>
      <FlatList data={filteredBusStops} keyExtractor={(item) => item.id} renderItem={renderBusStopItem} />
    </View>
  );
};

const getStyles = (theme) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.background,
    },
    loadingContainer: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: theme.back,
    },
    searchBar: {
      backgroundColor: theme.barColor,
    },
    searchContainer: {
      marginHorizontal: '5%',
      marginBottom: '5%',
      borderRadius: 30,
      elevation: 10,
      top: 10,
    },
    busStopItem: {
      marginHorizontal: '6%',
      paddingVertical: 16,
    },
    title: {
      color: theme.color,
      fontSize: 16,
      fontWeight: 'bold',
    },
    subText: {
      color: theme.subtext,
    },
  });

export default Search;
////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
api request response text
/////
        <Text>Bus Details:</Text>
          {responseData.map((bus, index) => (
        <View key={index}>
          <Text>VehicleRegNo: {bus.VehicleRegNo}</Text>
          <Text>Speed: {bus.Speed}</Text>
          <Text>EngineStatus: {bus.EngineStatus}</Text>
          <Text>TrackingDateTime: {bus.TrackingDateTime}</Text>
          <Text>--------------------------</Text>
        </View>
      ))}

      /////////////////////////////////////////////////////////////

      *////////////////////////////////////*****
      focus bus location on map
        const focusOnBusLocation = () => {
    if (responseData && responseData.VehicleDetail.length > 0) {
      const busLatitude = responseData.VehicleDetail[0].Latitude;
      const busLongitude = responseData.VehicleDetail[0].Longitude;

      if (busLatitude && busLongitude && mapRef.current) {
        mapRef.current.animateToRegion({
          latitude: busLatitude,
          longitude: busLongitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      }
    }
  };
  */////////////////*/**/*/*/*///

  //////////////////////////////////////////////////////////////////////////////////////////***
  MapScreen*/*/*/*/*/*/*/*/*
  import React, { useEffect, useState, useContext } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';
import MapView, { Marker } from 'react-native-maps';
import * as Location from 'expo-location';
import themeContext from "../config/themeContext";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import SearchBar from '../components/SearchBar';
import { getDatabase, ref, onValue, off } from 'firebase/database';

const MapScreen = ({ route }) => {
  const { busStop } = route?.params ?? {};

  const [userLocation, setUserLocation] = useState(null);
  const [mapRegion, setMapRegion] = useState(null);
  const [busStops, setBusStops] = useState([]);

  const theme = useContext(themeContext);
  const styles = getStyles(theme);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        console.log('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setUserLocation(location.coords);

      if (busStop) {
        setMapRegion({
          latitude: busStop.latitude,
          longitude: busStop.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      } else {
        setMapRegion({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      }
    })();
  }, []);

  useEffect(() => {
    const db = getDatabase();
    const busStopsRef = ref(db, 'busStops');

    const handleSnapshot = (snapshot) => {
      const stops = [];
      snapshot.forEach((childSnapshot) => {
        const busStopData = childSnapshot.val();
        stops.push(busStopData);
      });
      setBusStops(stops);
    };

    const onDataLoad = onValue(busStopsRef, handleSnapshot);

    return () => {
      off(busStopsRef, onDataLoad);
    };
  }, []);

  const focusUserLocation = () => {
    if (userLocation) {
      mapRef.current.animateToRegion({
        latitude: userLocation.latitude,
        longitude: userLocation.longitude,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421,
      });
    }
  };

  const mapRef = React.createRef();

  return (
    <View style={styles.container}>
      {userLocation && mapRegion && (
        <MapView style={styles.map} region={mapRegion}>
          {busStops.map((stop) => (
            <Marker
              key={stop.stopId}
              coordinate={{
                latitude: stop.latitude,
                longitude: stop.longitude,
              }}
              title={stop.stopName}
              pinColor='green'
            />
          ))}
        </MapView>
      )}

      {!userLocation && <ActivityIndicator style={styles.loader} size="large" color={theme.accent} />}

      <View style={styles.searchBarContainer}>
        <View style={styles.searchBar}>
          <SearchBar />
        </View>
      </View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.button} onPress={focusUserLocation}>
          <View style={styles.buttonContent}>
            <MaterialCommunityIcons style={styles.icon} name="crosshairs-gps" />
            <Text style={styles.buttonText}>Focus On Your Location</Text>
          </View>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const getStyles = (theme) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: 'white',
    },
    map: {
      flex: 1,
    },
    searchBarContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
    },
    buttonContainer: {
      position: 'absolute',
      bottom: 10,
      alignSelf: 'center',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent',
    },
    buttonContent: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    button: {
      backgroundColor: theme.accent,
      padding: 16,
      borderRadius: 29,
      alignItems: 'center',
      justifyContent: 'center',
    },
    buttonText: {
      color: '#fff',
      fontSize: 14,
      fontWeight: 'bold',
    },
    icon: {
      fontSize: 22,
      paddingRight: 5,
      color: '#fff',
    },
    loader: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
  });

export default MapScreen;
/*/*/****************************//////////////////////////////

/////////////////////////////*/***/*//**/*/*/*/*/*/*/*/****[**[[*[*[*]]]]]
tickets Screen///////////////////////////////////////////////////////
import React, { useContext } from 'react';
import { View, StyleSheet, Dimensions, Text, Image, ScrollView } from "react-native";
import { TabView, SceneMap, TabBar } from "react-native-tab-view";
import { DefaultTheme, Divider, Provider as PaperProvider } from "react-native-paper";
import { PagerView } from "react-native-pager-view";
import themeContext from "../config/themeContext";

const ActiveRoute = () => {
  const theme = useContext(themeContext);
  const styles = getStyles(theme);  
  return(
  <ScrollView>
    <View>
      {/* <View style={styles.ticket}>
        <View>
          <Text style={styles.title}>Single Journey Ticket</Text>
          <Text style={styles.text}>GA - 03 - X - 1337</Text>
          <Text style={styles.text}>Old Bus Stand - Ponda</Text>
          <Text style={styles.text}>KTC Bus Stand - Panaji</Text>
          <Text style={styles.text}>1 Adult</Text>
          <Text style={styles.text}>₹30 Total Fair Paid</Text>
        </View>
        <Divider style={{ marginVertical: 10 }} />
        <View style={styles.qr}>
          <Text style={styles.qrDate}>27 March 2023, 03:33:33 PM</Text>
          <Image source={require("../assets/qr.png")} />
        </View>
      </View>

      <View style={styles.ticket}>
        <View>
          <View>
          <Text style={styles.title}>Single Journey Ticket</Text>
            <Text style={styles.text}>GA - 03 - X - 1111</Text>
            <Text style={styles.text}>Old Bus Stand - Ponda</Text>
            <Text style={styles.text}>KTC Bus Stand - Panaji</Text>
            <Text style={styles.text}>2 Adults</Text>
            <Text style={styles.text}>₹60 Total Fair Paid</Text>
          </View>
        </View>
        <Divider style={{ marginVertical: 10 }} />
        <View style={styles.qr}>
          <Text style={styles.qrDate}>28 March 2023, 07:12:11 PM</Text>
          <Image source={require("../assets/qr.png")} />
        </View>
      </View> */}
      <View style={{justifyContent: 'center', alignItems: 'center'}}>
      <Text style={styles.text}>
        No active tickets
      </Text>
      </View>
    </View>
  </ScrollView>
);
}

const ExpiredRoute = () => {
  const theme = useContext(themeContext);
  const styles = getStyles(theme);

  return(
  <ScrollView>
    <View>
      <View style={styles.ticket}>
        <View>
          <Text style={styles.title}>Single Journey Ticket</Text>
          <Text style={styles.text}>GA - 03 - X - 1337</Text>
          <Text style={styles.text}>Old Bus Stand - Ponda</Text>
          <Text style={styles.text}>KTC Bus Stand - Panaji</Text>
          <Text style={styles.text}>1 Adult</Text>
          <Text style={styles.text}>₹30 Total Fair Paid</Text>
        </View>
        <Divider style={{ marginVertical: 10 }} />
        <View style={styles.qr}>
          <Text style={styles.qrDate}>27 March 2023, 03:33:33 PM</Text>
          <Image source={require("../assets/qr.png")} />
        </View>
      </View>
    </View>
  </ScrollView>
  );
}

const initialLayout = { width: Dimensions.get("window").width };

export default function Tickets() {

  const theme = useContext(themeContext);
  const styles = getStyles(theme);

  const [index, setIndex] = React.useState(0);
  const [routes] = React.useState([
    { key: "active", title: "Active" },
    { key: "expired", title: "Expired" },
  ]);

  const renderScene = SceneMap({
    active: ActiveRoute,
    expired: ExpiredRoute,
  });

  const renderTabBar = (props) => (
    <TabBar
      {...props}
      style={styles.tabBar}
      indicatorStyle={styles.indicator}
      labelStyle={styles.label}
    />
  );

  return (
    <PaperProvider theme={DefaultTheme}>
      <TabView
        navigationState={{ index, routes }}
        renderScene={renderScene}
        onIndexChange={setIndex}
        initialLayout={initialLayout}
        renderTabBar={renderTabBar}
        renderPager={(props) => <PagerView {...props} />}
      />
    </PaperProvider>
  );
}

const getStyles = (theme) =>
StyleSheet.create({
  scene: {
    flex: 1,
  },
  tabBar: {
    backgroundColor: theme.background,
  },
  indicator: {
    backgroundColor: 'gold',
  },
  label: {
    color: theme.color,
    fontWeight: "bold",
  },
  title: {
    fontSize: 25,
    fontWeight: "bold",
    color: theme.color,
  },
  text: {
    fontSize: 18,
    color: theme.color,
  },
  ticket: {
    borderColor: "gray",
    borderWidth: 1,
    marginHorizontal: 10,
    padding: 10,
    borderRadius: 9,
    marginVertical: 10,
    color: theme.color,
    backgroundColor: theme.background,
  },
  qr: {
    alignItems: "center",
    color: theme.color,
  },
  qrDate: {
  marginBottom: 10,
  color: theme.color,
  }
});
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////




/////////////////////////map with routes to bus stops/////////////////////////////////
//////////////////////////////////////////////////
import React, { useEffect, useState, useContext, useRef } from 'react';
import { StyleSheet, View, Text, TouchableOpacity, ActivityIndicator, Image } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';
import * as Location from 'expo-location';
import themeContext from "../config/themeContext";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import MapViewDirections from 'react-native-maps-directions';
import SearchBar from '../components/SearchBar';
import axios from 'axios';
import { getDatabase, ref, onValue, off } from 'firebase/database';
import { GMAPS_KEY } from '@env';


const MapScreen = ({ route }) => {
  const { busStop } = route?.params ?? {};
  
  const [userLocation, setUserLocation] = useState(null);
  const [mapRegion, setMapRegion] = useState(null);
  const [busStops, setBusStops] = useState([]);
  const [selectedBusStop, setSelectedBusStop] = useState(null);
  const [busRouteCoordinates, setBusRouteCoordinates] = useState([]);
  const [selectedBusStops, setSelectedBusStops] = useState([]);

  const theme = useContext(themeContext);
  const styles = getStyles(theme);

  const [showTrackBusButton, setShowTrackBusButton] = useState(false);
  const [responseData, setResponseData] = useState(null);

  const makeApiRequest = async () => {
    try {
      const timestamp = new Date().getTime();
      const url = `http://65.1.176.163:3000/api?timestamp=${timestamp}`;
      const vehicleNumbers = ['GA08V4965', 'GA0B4966', 'GA08V4967', 'GA08V4968', 'GA08V4972', 'GA08V4973', 'GA08V4974',
                              'GA08V4975', 'GA08V4976', 'GA08V4977', 'GA08V4978', 'GA08V4979', 'GA08V4980', 'GA08V4981',
                              'GA08V4982', 'GA08V4983', 'GA08V4984', 'GA08V4985', 'GA08V4986', 'GA08V4987'];
      const fetchedData = [];
      for (const vehicleNumber of vehicleNumbers) {
        const payload = {
          VehicleRegNo: vehicleNumber
        };
        const response = await axios.post(url, payload);
        // console.log(response.data);
        if (response.data.VehicleDetail.length > 0) {
          const vehicle = response.data.VehicleDetail[0];
          if (vehicle.EngineStatus === 'On') {
            fetchedData.push(vehicle);
          }
        }
      }
      console.log(fetchedData);
      setResponseData(fetchedData);
    } catch (error) {
      console.error(error);
    }
  };

  // Function to calculate the distance between two coordinates using the Haversine formula
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371; // Radius of the Earth in kilometers
    const dLat = (lat2 - lat1) * (Math.PI / 180);
    const dLon = (lon2 - lon1) * (Math.PI / 180);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(lat1 * (Math.PI / 180)) *
        Math.cos(lat2 * (Math.PI / 180)) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;
    return distance;
  };
  
  // Function to find the closest bus to the selected bus stop
  const findClosestBus = () => {
    if (selectedBusStop && responseData && responseData.length > 0) {
      let closestBus = responseData[0];
      let minDistance = calculateDistance(
        selectedBusStop.latitude,
        selectedBusStop.longitude,
        closestBus.Latitude,
        closestBus.Longitude
      );
  
      for (let i = 1; i < responseData.length; i++) {
        const distance = calculateDistance(
          selectedBusStop.latitude,
          selectedBusStop.longitude,
          responseData[i].Latitude,
          responseData[i].Longitude
        );
  
        if (distance < minDistance) {
          closestBus = responseData[i];
          minDistance = distance;
        }
      }
  
      return closestBus;
    }
  
    return null;
  };

  const closestBus = findClosestBus();

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        console.log('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setUserLocation(location.coords);

      if (busStop) {
        setMapRegion({
          latitude: busStop.latitude,
          longitude: busStop.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      } else {
        setMapRegion({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          latitudeDelta: 0.0922,
          longitudeDelta: 0.0421,
        });
      }
    })();
  }, []);

  useEffect(() => {
    const db = getDatabase();
    const busStopsRef = ref(db, 'busStops');

    const handleSnapshot = (snapshot) => {
      const stops = [];
      snapshot.forEach((childSnapshot) => {
        const busStopData = childSnapshot.val();
        stops.push(busStopData);
      });
      setBusStops(stops);
    };

    const onDataLoad = onValue(busStopsRef, handleSnapshot);

    return () => {
      off(busStopsRef, onDataLoad);
    };
  }, []);

  const mapRef = useRef(null);

  const focusUserLocation = () => {
    setSelectedBusStop(null);
    if (userLocation && mapRef.current) {
      mapRef.current.animateToRegion({
        latitude: userLocation.latitude,
        longitude: userLocation.longitude,
        latitudeDelta: 0.0922,
        longitudeDelta: 0.0421,
      });
    }
  };

  const handleBusStopPress = (busStop) => {
    if (selectedBusStops.length === 2) {
      setSelectedBusStops([busStop]);
    } else {
      setSelectedBusStops([...selectedBusStops, busStop]);
    }
    setSelectedBusStop(busStop);
    setShowTrackBusButton(true);
  };

  return (
    <View style={styles.container}>
    {userLocation && mapRegion && (
      <MapView 
        style={styles.map} 
        region={mapRegion}
        ref={mapRef}
        showsCompass={true}
        showsUserLocation={true}
        showsMyLocationButton={false}
        userInterfaceStyle='dark'
      >
        {/* show bus stop markers */}
        {busStops.map((stop) => (
          <Marker
            key={stop.stopId}
            coordinate={{
              latitude: stop.latitude,
              longitude: stop.longitude,
            }}
            title={stop.stopName}
            description={stop.address}
            pinColor='#0362fc'
            onPress={() => handleBusStopPress(stop)}
          />
        ))}

        {/* show route between 2 bus stops */}
        {selectedBusStops.length >= 2 && (
          <MapViewDirections
            origin={{
              latitude: selectedBusStops[0].latitude,
              longitude: selectedBusStops[0].longitude,
            }}
            destination={{
              latitude: selectedBusStops[1].latitude,
              longitude: selectedBusStops[1].longitude,
            }}
            apikey={GMAPS_KEY}
            strokeWidth={4}
            strokeColor="red"
          />
        )}
        {/* show a route between bus and the selected bus stop  */}
        {busRouteCoordinates.length > 0 && (
          <Polyline
            coordinates={busRouteCoordinates}
            strokeWidth={4}
            strokeColor="blue"
          />
        )}
        {/* show the closest bus to the bus stop on the map */}
        {closestBus && (
          <Marker
            title={closestBus.VehicleRegNo}
            description={'Updated: ' + closestBus.TrackingDateTime}
            coordinate={{
                latitude: closestBus.Latitude,
                longitude: closestBus.Longitude,
              }}
            >
              <Image source={require('../assets/bus-icon.png')} style={{ width: 55, height: 55 }} />
            </Marker>
          )}
      </MapView>
    )}

      {!userLocation && <ActivityIndicator style={styles.loader} size="large" color={theme.accent} />}
      <View style={styles.searchBarContainer}>
        <View style={styles.searchBar}>
          <SearchBar />
        </View>
      </View>
      <View style={styles.buttonContainer}>
      {showTrackBusButton && (
        <TouchableOpacity style={styles.button} onPress={makeApiRequest}>
          <View style={styles.buttonContent}>
            <MaterialCommunityIcons style={styles.icon} name="bus-marker" />
            <Text style={styles.buttonText}>Track Bus</Text>
          </View>
        </TouchableOpacity>
      )}
      </View>
      <View style={[styles.buttonContainer, {alignSelf: 'flex-end', right: 5, bottom: 50}]}>
        <TouchableOpacity style={styles.button} onPress={focusUserLocation}>
            <MaterialCommunityIcons color={'#fff'} size={22} name="crosshairs-gps" />
         </TouchableOpacity>
      </View>
    </View>
  );
};

const getStyles = (theme) => {
  return StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: theme.background,
    },
    map: {
      flex: 1,
    },
    searchBarContainer: {
      position: 'absolute',
      top: 0,
      left: 0,
      right: 0,
    },
    buttonContainer: {
      position: 'absolute',
      bottom: 2,
      alignSelf: 'center',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: 'transparent',
    },
    buttonContent: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    button: {
      backgroundColor: theme.accent,
      padding: 16,
      borderRadius: 29,
      alignItems: 'center',
      justifyContent: 'center',
      marginBottom: 10,
    },
    buttonText: {
      color: '#fff',
      fontSize: 14,
      fontWeight: 'bold',
    },
    icon: {
      fontSize: 22,
      paddingRight: 5,
      color: '#fff',
    },
    loader: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
    },
  });
};

export default MapScreen;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////